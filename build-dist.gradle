apply from: 'build.gradle'

project.skipJarTask = true

defaultTasks 'uploadArchives'
try {
    project.getByName("updateWrapper")
} catch (RuntimeException re) {
    assert false:
'''The current version of PgpPlugin is incompatible with the version of Gradle
that you are using.
What you must do until either Gradle or PgpPlugin gets fixed, is
    1:  Install Gradle v. 1.0-milestone-3 system
    2:  Build your jar file as usual, using 'gradlew' and the main build file
    3:  You must use the milestone 3 binary whenever you specify
        -b build-dist.gradle.  Something like:
            /path/to/gradle -b build-dist.gradle [-switches and targets]
'''
} 

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.huxhorn.gradle:de.huxhorn.gradle.pgp-plugin:0.0.3'
    }
}

apply plugin: de.huxhorn.gradle.pgp.PgpPlugin

pgp {
    assert (project.hasProperty('pgp.secretKeyRingFile')
            && project.hasProperty('pgp.keyId')
            && project.hasProperty('pgp.password')) :
            "Properties 'pgp.secretKeyRingFile, pgp.keyId, pgp.password are required for our PgpPlugin integration"
    secretKeyRingFile = new File(project.property('pgp.secretKeyRingFile'))
    keyId = project.property('pgp.keyId')
    password =  project.property('pgp.password')
}

uploadArchives {
    if (!project.hasProperty('mavenRepository.dest.url'))
        // This crap just to satisfy load-time requirement when the
        // uploadArchives task won't even be used.
        project.setProperty('mavenRepository.dest.url', '')
    repositories.mavenDeployer {
        repository(url: project.property('mavenRepository.dest.url'))
        pom.project {
            name "$project.name, RelaxNG+Schematron-capable validator"
            //packaging jar   BUG with Gradle prevents this from having effect
            description project.description
            url project.url
            inceptionYear project.inceptionYear
            scm {
                url project.getProperty('scm.url')
                connection project.getProperty('scm.connection')
            }
            licenses {
                license {
                    name 'Sun open source'
                    url 'https://github.com/unsaved/relames/blob/master/doc/copyright.txt'
                    distribution 'repo'
                }
                license {
                    name 'Apache 2.0'
                    url 'https://github.com/unsaved/relames/blob/master/doc/Apache-LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'kohsuke'
                    name 'Kohsuke Kawaguchi'
                    email 'kohsuke.kawaguchi@eng.sun.com'
                }
                developer {
                    id 'unsaved'
                    name 'Blaine Simpson'
                    email 'blaine.simpson@admc.com'
                }
            }
        }
    }
}

uploadArchives { doFirst {
    assert project.hasProperty('group') && project.group != '' :
            "Property 'group' is required by 'uploadArchives' task."
    /*  Unfortunately, Maven plugin has no OOTB way to get a proper
     *  organization name into the descriptors.
    assert project.hasProperty('organization') && project.organization != '' :
            "Property 'organization' is required by 'uploadArchives' task."
     */
    assert (project.hasProperty('mavenRepository.dest.url')
            && project.property('mavenRepository.dest.url') != ''):
    "Property 'mavenRepository.dest.url' is required by 'uploadArchives' task."

    assert (project.hasProperty('scm.connection')
            && project.hasProperty('scm.url')
            && project.hasProperty('url')
            && project.hasProperty('inceptionYear')) :
            ("Following properties required for 'uploadArchives' task: "
            + 'scm.connection, scm.url, url, inceptionYear')
} }
