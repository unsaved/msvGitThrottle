apply from: 'build.gradle'

defaultTasks 'uploadArchives'

/****************************************************************************
 ** WARNING:  Following buildscript contains a work-around for a bug in
 ** PgpPlugin that prevents it working with Gradle 1.0-milestone-5.
 ** You MUST:
 ** 1:
 **   git clone git://github.com/huxi/huxi-gradle-plugins.git
 ** 2:
 ** Make the following change to the file
 ** "src/main/groovy/de/huxhorn/gradle/pgp/PgpPlugin.grooy":
 ** -  def uploadTask = project.getByName('uploadArchives')
 ** +  def uploadTask =
 ** +          project.getTasksByName('uploadArchives', false).toArray()[0]  
 ** 3:
 ** Run the 'uploadArchives' task of it.
 ** That will install everything you need to under $HOME/local-gradle-repository
 **
 ** When a fixed version of PgpPlugin is available in Maven, hopefully with
 ** PgpPlug version 0.0.4, we just need to remove the local repository below
 ** and replace the SNAPSHOT classpath setting with the 0.0.4 setting.
 ***************************************************************************/
buildscript {
    repositories {
        maven { url ( System.properties['user.home']
                + '/local-gradle-repository/snapshot') }
        mavenCentral()
    }
    dependencies {
        classpath 'de.huxhorn.gradle:de.huxhorn.gradle.pgp-plugin:0.0.4-SNAPSHOT'
        //classpath 'de.huxhorn.gradle:de.huxhorn.gradle.pgp-plugin:0.0.4'
    }
}

apply plugin: de.huxhorn.gradle.pgp.PgpPlugin

pgp {
    assert (project.hasProperty('pgp.secretKeyRingFile')
            && project.hasProperty('pgp.keyId')
            && project.hasProperty('pgp.password')) :
            "Properties 'pgp.secretKeyRingFile, pgp.keyId, pgp.password are required for our PgpPlugin integration"
    secretKeyRingFile = new File(project.property('pgp.secretKeyRingFile'))
    keyId = project.property('pgp.keyId')
    password =  project.property('pgp.password')
}

uploadArchives {
    if (!project.hasProperty('mavenRepository.dest.url'))
        // This crap just to satisfy load-time requirement when the
        // uploadArchives task won't even be used.
        project.setProperty('mavenRepository.dest.url', '')
    if (!project.hasProperty('mavenRepository.dest.username'))
        project.setProperty('mavenRepository.dest.username', '')
    if (!project.hasProperty('mavenRepository.dest.password'))
        project.setProperty('mavenRepository.dest.password', '')

    repositories.mavenDeployer {
        repository(url: project.property('mavenRepository.dest.url')) {
            authentication(
                userName: project.property('mavenRepository.dest.username'),
                password: project.property('mavenRepository.dest.password')
            )
        }
        pom.project {
            name "$project.name, RelaxNG+Schematron-capable validator"
            //packaging jar   BUG with Gradle prevents this from having effect
            description project.description
            url project.url
            inceptionYear project.inceptionYear
            scm {
                url project.getProperty('scm.url')
                connection project.getProperty('scm.connection')
            }
            licenses {
                license {
                    name 'Sun open source'
                    url 'https://github.com/unsaved/relames/blob/master/doc/copyright.txt'
                    distribution 'repo'
                }
                license {
                    name 'Apache 2.0'
                    url 'https://github.com/unsaved/relames/blob/master/doc/Apache-LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'unsaved'
                    name 'Blaine Simpson'
                    email 'blaine.simpson@admc.com'
                }
            }
        }
    }
}

uploadArchives { doFirst {
    assert project.hasProperty('group') && project.group != '' :
            "Property 'group' is required by 'uploadArchives' task."
    /*  Unfortunately, Maven plugin has no OOTB way to get a proper
     *  organization name into the descriptors.
    assert project.hasProperty('organization') && project.organization != '' :
            "Property 'organization' is required by 'uploadArchives' task."
     */
    assert (project.hasProperty('mavenRepository.dest.url')
            && project.property('mavenRepository.dest.url') != ''):
    "Property 'mavenRepository.dest.url' is required by 'uploadArchives' task."

    assert (project.hasProperty('scm.connection')
            && project.hasProperty('scm.url')
            && project.hasProperty('url')
            && project.hasProperty('inceptionYear')) :
            ("Following properties required for 'uploadArchives' task: "
            + 'scm.connection, scm.url, url, inceptionYear')
} }
